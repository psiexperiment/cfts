import logging
log = logging.getLogger(__name__)

from atom.api import Float, List
from enaml.core.api import d_
from enaml.widgets.api import Container, DockItem, Label
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command
import pandas as pd

from psi.context.api import CartesianProduct
from psi.controller.api import ExperimentAction, Input
from psi.data.plots import (DataFramePlot, FFTContainer, ResultPlot,
                            PlotContainer, ViewBox)
from psi.experiment.api import StatusItem

from .cfts_mixins import CFTSSelector
from .dpoae_base import DPOAEManifest
from .dpoae_mixins import DPOAEThreshold

EXPERIMENT = __name__.rsplit('.', 1)[-1]
EXPERIMENT_SIMPLE = __name__.rsplit('.', 1)[-1] + '_simple'


from enaml.core.api import Looper
from enaml.widgets.api import Form, ObjectCombo, ProgressBar
from psi.context.api import Expression


enamldef DPOAEIOBaseManifest(DPOAEManifest): manifest:

    Extension:
        id = EXPERIMENT + '.sinks'
        point = 'psi.data.sinks'

        DPOAEThreshold:
            name = 'dpoae_threshold'

    Extension:
        id = EXPERIMENT + '.commands'
        point = 'enaml.workbench.core.commands'

    Extension:
        id = EXPERIMENT + '.context'
        point = 'psi.context.items'

        Expression:
            # Set tone duration to one hour. If you need more than one hour,
            # you need to check your settings! TODO: We should be able to set
            # this to np.inf to indicate open-ended duration, but this is
            # causing the program to hang. Need to track down the bug.
            parameter = 'secondary_tone_duration'
            expression = '3600'

    Extension:
        id = EXPERIMENT + '.actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'dpoae_acquired'
            command = 'psi.context.next_setting'
            kwargs = {'selector': 'default', 'save_prior': True}

        ExperimentAction:
            event = 'context_next_setting'
            command = 'dpoae.start'
            kwargs = {'delay': 1.0}

        ExperimentAction:
            event = 'context_complete'
            command = 'psi.controller.stop'

    Extension:
        id = EXPERIMENT + '.plots'
        point = 'psi.data.plots'

        PlotContainer: pc:
            name = 'dpoae_io_container'
            label = 'DPOAE input-output functions'
            fmt_button => (key):
                return '{} Hz'.format(key[0])

            ViewBox: vb:
                name = 'dpoae_io_viewbox'
                y_mode = 'mouse'
                save_limits = True

                ResultPlot: grp:
                    source_name = 'analyze_dpoae'
                    x_column = 'secondary_tone_level'
                    pen_width = 2
                    tab_grouping = ['secondary_tone_frequency']
                    tab_keys >> pc.buttons
                    selected_tab := pc.current_button
                    auto_select := pc.auto_select
                    label = 'F2'
                    y_column = 'f2_level'
                    pen_color = 'indianred'

                ResultPlot:
                    source_name << grp.source_name
                    x_column << grp.x_column
                    pen_width << grp.pen_width
                    tab_grouping << grp.tab_grouping
                    selected_tab << grp.selected_tab
                    auto_select << grp.auto_select
                    label = 'F1'
                    y_column = 'f1_level'
                    pen_color = 'lightsalmon'

                ResultPlot:
                    source_name << grp.source_name
                    x_column << grp.x_column
                    pen_width << grp.pen_width
                    tab_grouping << grp.tab_grouping
                    selected_tab << grp.selected_tab
                    auto_select << grp.auto_select
                    label = 'Noise Floor'
                    y_column = 'dpoae_noise_floor'
                    pen_color = 'lightsteelblue'

                ResultPlot:
                    source_name << grp.source_name
                    x_column << grp.x_column
                    pen_width << grp.pen_width
                    tab_grouping << grp.tab_grouping
                    selected_tab << grp.selected_tab
                    auto_select << grp.auto_select
                    label = 'DPOAE'
                    y_column = 'dpoae_level'
                    pen_color = 'darkred'

    Extension:
        id = EXPERIMENT + '.workspace'
        point = 'psi.experiment.status'
        rank = 10

        StatusItem:
            label = 'Current trial'

            ProgressBar: pb_trial:
                name = 'dpoae_trial_pb'
                text_visible = True

        StatusItem:
            label = 'Trials '

            ProgressBar: pb_trials:
                name = 'dpoae_trials_pb'
                text_visible = True


enamldef DPOAEIOManifest(DPOAEIOBaseManifest): manifest:

    Extension:
        id = EXPERIMENT + '.selectors'
        point = 'psi.context.selectors'

        CartesianProduct:
            name = 'default'
            label = 'DPOAE'


def configure_dpoaeio_simple(event):
    context = event.workbench.get_plugin('psi.context')
    freq = context.get_parameter('f2_frequency')
    level = context.get_parameter('f2_level')
    for p in (freq, level):
        p.visible = False
        p.editable = False
        p.rove = True


def configure_dpoaeio_gui(event):
    ui = event.workbench.get_plugin('enaml.workbench.ui')
    pb_trials = ui.window.find('dpoae_trials_pb')
    pb_trial = ui.window.find('dpoae_trial_pb')

    context = event.workbench.get_plugin('psi.context')
    n_fft = context.get_value('n_fft')
    n_time = context.get_value('n_time')
    pb_trial.maximum = n_fft * n_time
    pb_trials.maximum = context.n_values()
    f2 = context.unique_values('secondary_tone_frequency')
    l1 = context.unique_values('primary_tone_level')
    l2 = context.unique_values('secondary_tone_level')
    levels = l1 | l2

    data = event.workbench.get_plugin('psi.data')
    vb = data.find_viewbox('dpoae_io_viewbox')
    pc = data.find_plot_container('dpoae_io_container')

    pc.x_min = min(levels) - 10
    pc.x_max = max(levels) + 10
    vb.y_min = min(vb.y_min, min(levels) - 10)
    vb.y_max = max(vb.y_max, max(levels) + 10)

    lb, ub = min(f2) / 1.2, max(f2) * 1.2
    pc = data.find_plot_container('dpoae_threshold_container')
    pc.freq_lb = lb
    pc.freq_ub = ub

    try:
        plugin = event.workbench.get_plugin('dpoae_microphone_fft_mixin')
        plugin.manifest.fft_freq_lb = lb
        plugin.manifest.fft_freq_ub = ub
    except ValueError:
        # Plugin is not registered
        pass


enamldef DPOAEIOSimpleManifest(DPOAEIOBaseManifest): manifest:

    Extension:
        id = EXPERIMENT_SIMPLE + '.actions'
        point = 'psi.controller.actions'
        ExperimentAction:
            event = 'plugins_started'
            command = 'psi.controller.configure_plugins'
        ExperimentAction:
            event = 'context_initialized'
            command = 'psi.controller.configure_dpoae_gui'

    Extension:
        id = EXPERIMENT_SIMPLE + '.commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'psi.controller.configure_plugins'
            handler = configure_dpoaeio_simple
        Command:
            id = 'psi.controller.configure_dpoae_gui'
            handler = configure_dpoaeio_gui

    Extension:
        id = EXPERIMENT_SIMPLE + '.selectors'
        point = 'psi.context.selectors'

        CFTSSelector:
            name = 'default'
            label = 'DPOAE stimuli'
