import logging
log = logging.getLogger(__name__)

from functools import partial

import numpy as np

from enaml.application import deferred_call
from enaml.widgets.api import DockItem, Container
from enaml.workbench.api import Extension, PluginManifest

from psiaudio.util import db

from psi.context.api import (ContextGroup, Parameter, BoolParameter, EnumParameter)
from psi.controller.api import ExperimentAction
from psi.controller.api import (ContinuousInput, ControllerManifest,
                                ExtractEpochs, RejectEpochs, IIRFilter, Input,
                                Detrend)
from psi.controller.output import QueuedEpochOutput
from psi.data.sinks.api import BColzStore, TextStore
from psi.token.primitives import Cos2Envelope, Tone


def set_expected_range(context, target):
    # Now, identify the maximum level on a per-frequency setting
    max_level = {}
    for setting in context.iter_settings('default', 1):
        frequency = setting['target_tone_frequency']
        level = setting['target_tone_level']
        max_level[frequency] = max(level, max_level.get(frequency, -np.inf))

    # Then figure out the maximum scaling factor required for that level.
    # Multiply to convert from RMS to peak to peak and add 1% headroom.
    max_sf = {}
    for frequency, level in max_level.items():
        sf = target.calibration.get_sf(frequency, level)
        max_sf[frequency] = sf
    max_sf = max(max_sf.values()) * np.sqrt(2) * 1.01
    target.channel.expected_range = (-max_sf, max_sf)


EXPERIMENT = 'abr_base'


enamldef ABRBaseManifest(ControllerManifest): manifest:
    '''
    Defines functionality shared by all applications that perform tone ABRs.

    Subclasses must add a command, `psi.controller.configure_experiment` that
    creates and configures the target queue.
    '''
    Extension:
        id = EXPERIMENT + '.store'
        point = 'psi.data.sinks'

        BColzStore:
            name = 'erp_eeg'
            #epoch_inputs = ['erp']
            continuous_inputs = ['eeg']

        TextStore:
            epoch_inputs = ['erp']

    Extension:
        id = EXPERIMENT + '.tokens'
        point = 'psi.token.tokens'

        Cos2Envelope: tone_burst:
            name = 'tone_burst'
            label = 'tone'
            hide = ['start_time']
            Tone:
                hide = ['polarity', 'phase']

    Extension:
        id = EXPERIMENT + '.io'
        point = 'psi.controller.io'

        QueuedEpochOutput: output:
            name = 'target'
            label = 'Target'
            token = tone_burst
            configurable = False
            target_name = C.output_channel
            initialized ::
                # Once the queue has been configured in one of the
                # subclasses, hook it up to the ExtractEpochs input so that
                # they communicate properly.
                self.connect(extract.added_queue.append, 'added')
                self.connect(extract.removed_queue.append, 'removed')
            complete ::
                controller = workbench.get_plugin('psi.controller')
                deferred_call(controller.invoke_actions, output.name + '_end')

        ContinuousInput:
            name = 'microphone'
            source_name << C.pt_channel
            source ::
                channel.gain = C.pt_input_gain

        Input:
            source_name << C.eeg_channel
            name = 'eeg'

            IIRFilter:
                name = 'eeg_filtered'
                N = 2
                btype = 'bandpass'
                ftype = 'butter'
                passthrough = not C.digital_filter
                f_highpass = C.digital_highpass
                f_lowpass = C.digital_lowpass

                ExtractEpochs: extract:
                    name = 'erp'
                    epoch_size = 8.5e-3

                    Detrend:
                        name = 'erp_detrend'
                        mode = C.detrend_mode

                        RejectEpochs:
                            name = 'valid_erp'
                            threshold = C.reject_threshold
                            mode = C.reject_mode

    Extension:
        id = EXPERIMENT + '.abr.context'
        point = 'psi.context.items'

        ContextGroup:
            name = 'artifact_reject'
            label = 'Artifact reject settings'

            EnumParameter:
                name = 'detrend_mode'
                label = 'Detrend mode'
                choices = {
                    'None': 'None',
                    'constant': '"constant"',
                    'linear': '"linear"',
                }
                default = 'None'
                scope = 'experiment'

            EnumParameter:
                name = 'reject_mode'
                label = 'Reject mode'
                compact_label = 'Rej. mode'
                choices = {
                    'absolute value': '"absolute value"',
                    'amplitude (max-min)': '"amplitude"',
                }
                default = 'absolute value'
                scope = 'experiment'

            Parameter:
                name = 'reject_threshold'
                label = 'Reject threshold'
                compact_label = 'Th'
                default = 2.5
                scope = 'experiment'

        ContextGroup:
            name = 'digital_filter'
            label = 'Digital filter settings'

            BoolParameter:
                name = 'digital_filter'
                label = 'Digital filter?'
                scope = 'experiment'
                default = True

            Parameter:
                name = 'digital_highpass'
                label = 'Digital highpass filter cutoff'
                default = 300
                scope = 'experiment'

            Parameter:
                name = 'digital_lowpass'
                label = 'Digital lowpass filter cutoff'
                default = 3000
                scope = 'experiment'

        ContextGroup:
            name = 'hardware_settings'
            label = 'Hardware settings'

            EnumParameter:
                name = 'pt_channel'
                label = 'Probe tube mic. channel'
                choices = manifest.get_hw_ai_choices()
                selected = next(iter(manifest.get_hw_ai_choices()))
                scope = 'experiment'

            Parameter:
                name = 'pt_input_gain'
                label = 'Probe tube input gain (dB)'
                dtype = 'float64'
                default = 40
                scope = 'experiment'

            EnumParameter:
                name = 'output_channel'
                label = 'Output channel'
                compact_label = 'ao'
                choices = manifest.get_hw_ao_choices()
                selected = next(iter(manifest.get_hw_ao_choices()))
                scope = 'experiment'

            EnumParameter:
                name = 'eeg_channel'
                label = 'EEG channel'
                compact_label = 'ai_eeg'
                choices = manifest.get_hw_ai_choices()
                selected = next(iter(manifest.get_hw_ai_choices()))
                scope = 'experiment'

            Parameter:
                name = 'amplifier_highpass'
                label = 'Amplifier highpass filter cutoff'
                default = 10
                scope = 'experiment'

            Parameter:
                name = 'amplifier_lowpass'
                label = 'Amplifier lowpass filter cutoff'
                default = 10e3
                scope = 'experiment'

            Parameter:
                name = 'amplifier_gain'
                label = 'Amplifier gain'
                default = 100e3
                scope = 'experiment'

    Extension:
        id = EXPERIMENT + '.actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.controller.configure_experiment'
            weight = 11

        ExperimentAction:
            event = 'experiment_initialize'
            command = 'psi.context.initialize'
            kwargs = {'selector': 'default', 'cycles': 1}

        ExperimentAction:
            event = 'engines_configured'
            command = 'target.start'
            kwargs = {'delay': 1}

        ExperimentAction:
            event = 'valid_erp_acquired'
            command = 'target.decrement_key'

        ExperimentAction:
            event = 'target_end'
            command = 'psi.controller.stop'
