import logging
log = logging.getLogger(__name__)

from enaml.widgets.api import ProgressBar
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

import numpy as np

from psiaudio.queue import InterleavedFIFOSignalQueue

from psi.controller.api import ControllerManifest, ExtractEpochs, ExperimentAction
from psi.experiment.api import StatusItem
from psi.token.primitives import Cos2Envelope, Gate, SAMEnvelope, SquareWaveEnvelope, Tone
from psi.data.sinks.api import EpochCounter, TextStore

from .cfts_mixins import CFTSSelector, EEGInput, PTMicrophoneInput, SpeakerOutput

EXPERIMENT = __name__.rsplit('.', 1)[-1]


def configure_experiment(event):
    context = event.workbench.get_plugin('psi.context')
    controller = event.workbench.get_plugin('psi.controller')
    data = event.workbench.get_plugin('psi.data')

    output = controller.get_output('target')
    max_level = {}
    for setting in context.iter_settings('default', 1):
        output.add_setting(setting, averages=1, iti_duration=1)
        frequency = setting['target_tone_frequency']
        level = setting['target_tone_level']
        max_level[frequency] = max(level, max_level.get(frequency, -np.inf))

    # Then figure out the maximum scaling factor required for that level.
    # Multiply to convert from RMS to peak to peak and add 1% headroom.
    max_sf = {}
    for frequency, level in max_level.items():
        sf = output.calibration.get_sf(frequency, level)
        max_sf[frequency] = sf
    max_sf = max(max_sf.values()) * np.sqrt(2) * 1.01 * 2
    log.info(max_sf)
    output.channel.expected_range = (-max_sf, max_sf)

    counter = data.find_sink('efr_counter')
    counter.requested_n = output.queue.count_requested_trials()


enamldef BaseEFRManifest(ControllerManifest): manifest:

    attr selected_token

    Extension:
        id = EXPERIMENT + '.tokens'
        point = 'psi.token.tokens'

        Cos2Envelope: sam_target:
            name = 'sam_tone'
            label = 'SAM tone'
            hide = ['start_time']
            SAMEnvelope:
                hide = ['delay', 'direction']
                name = 'mod'
                Tone:
                    hide = ['polarity', 'phase']

        Gate:
            name = 'ram_tone'
            label = 'RAM tone'
            hide = ['start_time']
            SquareWaveEnvelope:
                name = 'mod'
                Tone:
                    hide = ['polarity', 'phase']

    Extension:
        id = EXPERIMENT + '.io'
        point = 'psi.controller.io'

        PTMicrophoneInput:
            pass

        SpeakerOutput: output:
            queue = InterleavedFIFOSignalQueue()
            auto_decrement = True
            token << workbench.get_plugin('psi.token').get_token(selected_token)
            initialized ::
                self.queue.connect(extract.added_queue.append, 'added')
                self.queue.connect(extract.removed_queue.append, 'removed')

        EEGInput:
            ExtractEpochs: extract:
                epoch_size = getattr(C, f'target_{selected_token}_duration')
                name = 'erp'

    Extension:
        id = EXPERIMENT + '.selectors'
        point = 'psi.context.selectors'

        CFTSSelector:
            label = 'EFR stimuli'

    Extension:
        id = EXPERIMENT + '.commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = 'psi.controller.configure_experiment'
            handler = configure_experiment

    Extension:
        id = EXPERIMENT + '.actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.controller.configure_experiment'
            weight = 11

        ExperimentAction:
            event = 'experiment_initialize'
            command = 'psi.context.initialize'
            kwargs = {'selector': 'default', 'cycles': 1}

        ExperimentAction:
            event = 'erp_queue_end and not target_active'
            command = 'psi.controller.stop'

        ExperimentAction:
            event = 'engines_configured'
            command = 'target.start'
            kwargs = {'delay': 1}

    Extension:
        id = EXPERIMENT + '.data'
        point = 'psi.data.sinks'

        EpochCounter: counter:
            name = 'efr_counter'
            label = 'EFRs acquired'
            source_name = 'erp'

        TextStore:
            name = 'erp_metadata_store'
            epoch_inputs = ['erp']

    Extension:
        id = EXPERIMENT + '.workspace'
        point = 'psi.experiment.status'
        rank = 10

        StatusItem:
            label = 'Current trial'

            ProgressBar: pb_trial:
                name = 'dpoae_trial_pb'
                text_visible = True

        #StatusItem:
        #    label = 'Trials '

        #    ProgressBar: pb_trials:
        #        name = 'dpoae_trials_pb'
        #        text_visible = True


enamldef SAMEFRManifest(BaseEFRManifest):

    selected_token = 'sam_tone'


enamldef RAMEFRManifest(BaseEFRManifest):

    selected_token = 'ram_tone'
