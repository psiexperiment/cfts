import logging
log = logging.getLogger(__name__)


import numpy as np

from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

from psiaudio.queue import InterleavedFIFOSignalQueue

from psi.context import choice
from psi.context.api import ContextGroup, EnumParameter, Expression, Parameter, Result
from psi.context.selector import CartesianProduct

from psi.controller.api import ControllerManifest, ExperimentAction, SelectorQueuedEpochOutput
from psi.controller.input import ExtractEpochs, Accumulate, IIRFilter, Decimate, Blocked, ContinuousInput, IIRFilter
from psi.token.primitives import Cos2Envelope, Gate, SAMEnvelope, SquareWaveEnvelope, Tone

from psi.data.sinks.api import TextStore, TrialLog

EXPERIMENT = __name__.rsplit('.', 1)[-1]

from .cfts_mixins import EEGInput, PTMicrophoneInput


enamldef EFRManifest(ControllerManifest): manifest:

    Extension:
        id = EXPERIMENT + '.tokens'
        point = 'psi.token.tokens'

        Gate:
            name = 'ram_tone'
            label = 'RAM tone'
            SquareWaveEnvelope:
                Tone:
                    hide = ['polarity', 'phase']

        Cos2Envelope:
            name = 'sam_tone'
            label = 'SAM tone'
            hide = ['start_time']
            SAMEnvelope:
                hide = ['delay', 'direction']
                Tone:
                    hide = ['polarity', 'phase']

    Extension:
        id = EXPERIMENT + '.io'
        point = 'psi.controller.io'

        PTMicrophoneInput:
            pass

        SelectorQueuedEpochOutput: output:
            name = 'target'
            label = 'Target'
            target_name = C.output_channel
            queue = InterleavedFIFOSignalQueue()
            auto_decrement = True
            queue ::
                self.queue.connect(extract.added_queue.append, 'added')
                self.queue.connect(extract.removed_queue.append, 'removed')

        EEGInput:
            ExtractEpochs: extract:
                epoch_size = C.target_sam_tone_duration
                name = 'erp'

    Extension:
        id = EXPERIMENT + '.selectors'
        point = 'psi.context.selectors'

        CartesianProduct:
            name = 'default'
            label = 'EFR sequence'

    Extension:
        id = EXPERIMENT + '.context'
        point = 'psi.context.items'

        ContextGroup:
            name = 'hardware_settings'
            label = 'Hardware'

            EnumParameter:
                name = 'output_channel'
                label = 'Output channel'
                compact_label = 'ao'
                choices = manifest.get_hw_ao_choices()
                selected = next(iter(manifest.get_hw_ao_choices()))
                scope = 'experiment'

    Extension:
        id = EXPERIMENT + '.actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'experiment_initialize'
            command = 'psi.context.initialize'
            kwargs = {'selector': 'default', 'cycles': 1}

        ExperimentAction:
            event = 'erp_queue_end and not target_active'
            command = 'psi.controller.stop'

        ExperimentAction:
            event = 'engines_configured'
            command = 'target.start'
            kwargs = {'delay': 1}

    Extension:
        id = EXPERIMENT + '.data'
        point = 'psi.data.sinks'

        TextStore:
            name = 'erp_metadata_store'
            epoch_inputs = ['erp']
