import logging
log = logging.getLogger(__name__)

from enaml.workbench.api import Extension

from psiaudio.queue import InterleavedFIFOSignalQueue

from psi.context.selector import CartesianProduct
from psi.controller.api import ControllerManifest, ExperimentAction
from psi.controller.input import ExtractEpochs
from psi.token.primitives import Cos2Envelope, Gate, SAMEnvelope, SquareWaveEnvelope, Tone
from psi.data.sinks.api import TextStore

from .cfts_mixins import EEGInput, FreqLevelSelector, PTMicrophoneInput, SpeakerOutput

EXPERIMENT = __name__.rsplit('.', 1)[-1]


enamldef BaseEFRManifest(ControllerManifest): manifest:

    attr selected_token

    Extension:
        id = EXPERIMENT + '.tokens'
        point = 'psi.token.tokens'

        Cos2Envelope: sam_target:
            name = 'sam_tone'
            label = 'SAM tone'
            hide = ['start_time']
            SAMEnvelope:
                hide = ['delay', 'direction']
                Tone:
                    hide = ['polarity', 'phase']

        Gate:
            name = 'ram_tone'
            label = 'RAM tone'
            SquareWaveEnvelope:
                Tone:
                    hide = ['polarity', 'phase']

    Extension:
        id = EXPERIMENT + '.io'
        point = 'psi.controller.io'

        PTMicrophoneInput:
            pass

        SpeakerOutput: output:
            queue = InterleavedFIFOSignalQueue()
            auto_decrement = True
            token << workbench.get_plugin('psi.token').get_token(selected_token)
            queue ::
                self.queue.connect(extract.added_queue.append, 'added')
                self.queue.connect(extract.removed_queue.append, 'removed')

        EEGInput:
            ExtractEpochs: extract:
                epoch_size = getattr(C, f'target_{selected_token}_duration')
                name = 'erp'

    Extension:
        id = EXPERIMENT + '.selectors'
        point = 'psi.context.selectors'

        FreqLevelSelector:
            name = 'default'
            label = 'EFR stimuli'
            freq_name = f'target_tone_frequency'
            level_name = 'target_tone_level'

    Extension:
        id = EXPERIMENT + '.context'
        point = 'psi.context.items'

    Extension:
        id = EXPERIMENT + '.actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'experiment_initialize'
            command = 'psi.context.initialize'
            kwargs = {'selector': 'default', 'cycles': 1}

        ExperimentAction:
            event = 'erp_queue_end and not target_active'
            command = 'psi.controller.stop'

        ExperimentAction:
            event = 'engines_configured'
            command = 'target.start'
            kwargs = {'delay': 1}

    Extension:
        id = EXPERIMENT + '.data'
        point = 'psi.data.sinks'

        TextStore:
            name = 'erp_metadata_store'
            epoch_inputs = ['erp']


enamldef SAMEFRManifest(BaseEFRManifest):

    selected_token = 'sam_tone'


enamldef RAMEFRManifest(BaseEFRManifest):

    selected_token = 'ram_tone'
