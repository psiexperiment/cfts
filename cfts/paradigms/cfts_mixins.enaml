import logging
log = logging.getLogger(__name__)

import textwrap

import numpy as np
import pandas as pd

from atom.api import Enum, Float, Property, Str

from enaml.application import deferred_call
from enaml.core.api import Conditional, d_
from enaml.layout.api import vbox
from enaml.stdlib.fields import FloatField
from enaml.widgets.api import Container, DockItem, HGroup, Label, ObjectCombo
from enaml.workbench.api import Extension

from psiaudio.calibration import InterpCalibration, PointCalibration

from psi.context.api import (BaseSelector, BoolParameter, ContextGroup,
                             EnumParameter, Parameter)
from psi.controller.api import (ContinuousInput, Detrend, Downsample,
                                EpochOutput, ExperimentAction, ExtractEpochs,
                                IIRFilter, Input, RejectEpochs)
from psi.controller.calibration.api import (chirp_sens, ChirpCalibrate,
                                            ToneCalibrate, tone_sens)
from psi.core.enaml.api import DataFrameTable, ExperimentManifest, PSIManifest
from psi.data.plots import (ChannelPlot, TimeContainer, ViewBox)
from psi.data.sinks.api import DisplayValue, TextStore, ZarrStore
from psi.token.api import BandlimitedNoise, Cos2Envelope, Gate, SquareWave


################################################################################
# Simple frequency and level selectors
################################################################################
class FreqLevelSelector(BaseSelector):

    freq_lb = Float(5.6).tag(preference=True)
    freq_ub = Float(45.2).tag(preference=True)
    freq_step = Float(0.5).tag(preference=True)

    level_lb = Float(10.0).tag(preference=True)
    level_ub = Float(80.0).tag(preference=True)
    level_step = Float(5.0).tag(preference=True)
    level_order = Enum('ascending', 'descending').tag(preference=True)

    user_managed = False

    #: Name of level parameter controlled by this selector
    level_name = d_(Str())
    level_param = Property()

    #: Name of frequency parameter controlled by this selector
    freq_name = d_(Str())
    freq_param = Property()

    def _get_level_param(self):
        return self.find_item(self.level_name)

    def _get_freq_param(self):
        return self.find_item(self.freq_name)

    def get_levels(self):
        level_lb = self.level_lb
        level_ub = self.level_ub
        level_step = self.level_step
        level_order = self.level_order
        levels = np.arange(level_lb, level_ub + level_step / 2, level_step)
        if level_order == 'descending':
            levels = levels[::-1]
        return levels

    def get_freqs(self):
        freq_lb = self.freq_lb
        freq_ub = self.freq_ub
        freq_step = self.freq_step

        flb = np.log2(freq_lb)
        fub = np.log2(freq_ub) + freq_step / 2
        fi = np.round(np.arange(flb, fub, freq_step) / freq_step) * freq_step
        freqs = (2 ** fi) * 1e3
        freqs = freqs.astype('i')
        return freqs

    def get_iterator(self, cycles=None):
        levels = self.get_levels()
        freqs = self.get_freqs()

        if cycles is None:
            cycles = 1

        for i in range(cycles):
            for f in freqs:
                for l in levels:
                    yield {
                        self.freq_param: f,
                        self.level_param: l,
                    }


def get_actual_freq(selector, *args):
    freqs = selector.get_freqs()
    lb = freqs[0] * 1e-3
    ub = freqs[-1] * 1e-3
    n = len(freqs)
    mesg = f'''
    Frequencies are rounded to the nearest {selector.freq_step} octave.
    The current range of frequencies is {lb:.3f} to {ub:.3f} kHz for a total of
    {n} frequencies.'''
    return textwrap.fill(textwrap.dedent(mesg).strip())


enamldef FreqLevelContainer(Container):

    attr selector

    layout_constraints => ():
        fc = children[0].children
        lc = children[1].children
        ic = children[2].children

        constraints = [a.width == b.width for a, b in zip(fc, lc)]
        cbox = vbox(children[0], children[2], children[1])
        constraints.append(cbox)
        constraints.append(fc[0].left == lc[0].left)
        constraints.append(fc[0].left == ic[0].left)
        constraints.append(fc[0].width == ic[0].width)
        return constraints

    HGroup:
        share_layout = True
        constraints = [
            freq_lb.width == 40,
            freq_ub.width == 40,
            freq_step.width == 40,
        ]
        spacing = 5
        padding = 0
        align_widths = False
        Label:
            text = 'Frequencies:'
        FloatField: freq_lb:
            value := selector.freq_lb
            submit_triggers = ['lost_focus', 'return_pressed', 'auto_sync']
        Label:
            text = 'to'
        FloatField: freq_ub:
            value := selector.freq_ub
            submit_triggers = ['lost_focus', 'return_pressed', 'auto_sync']
        Label:
            text = 'kHz in'
        FloatField: freq_step:
            value := selector.freq_step
            submit_triggers = ['lost_focus', 'return_pressed', 'auto_sync']
        Label:
            text = 'octave steps'

    HGroup:
        share_layout = True
        spacing = 5
        padding = 0
        align_widths = False
        Label: level_label:
            text = 'Levels:'
        FloatField: level_lb:
            value := selector.level_lb
            submit_triggers = ['lost_focus', 'return_pressed', 'auto_sync']
        Label:
            text = 'to'
        FloatField: level_ub:
            value := selector.level_ub
            submit_triggers = ['lost_focus', 'return_pressed', 'auto_sync']
        Label:
            text = 'dB SPL in'
        FloatField: level_step:
            value := selector.level_step
            submit_triggers = ['lost_focus', 'return_pressed', 'auto_sync']
        Label:
            text = 'dB steps in '
        ObjectCombo:
            items << list(selector.get_member('level_order').items)
            selected := selector.level_order
        Label:
            text = ' order'

    HGroup:
        share_layout = True
        spacing = 5
        padding = 0
        align_widths = False
        Label: actual_freq_text:
            text = ''
        Label:
            text << get_actual_freq(selector,
                                    selector.freq_lb,
                                    selector.freq_ub,
                                    selector.freq_step)


enamldef FreqLevelSelectorManifest(PSIManifest): manifest:

    Extension:
        id = 'selector.' + manifest.contribution.name
        point = 'psi.experiment.workspace'

        DockItem:
            name = manifest.contribution.name + '.selector'
            title = manifest.contribution.label
            FreqLevelContainer:
                selector << manifest.contribution


enamldef TemperatureMixinManifest(ExperimentManifest): manifest:

    id = 'temperature_mixin'
    name = 'temperature'
    title = 'Temperature monitor'

    Extension:
        id = 'temperature_data'
        point = 'psi.data.sinks'

        ZarrStore:
            name = 'temperature_store'
            continuous_inputs = ['temperature']

        DisplayValue:
            name = 'temperature_display'
            label = 'Temperature'
            source_name = 'temperature_decimated'

    Extension:
        id = 'temperature_io'
        point = 'psi.controller.io'

        IIRFilter:
            source_name = 'temperature'
            f_lowpass = 0.5
            btype = 'lowpass'
            ftype = 'butter'
            N = 1

            Downsample:
                name = 'temperature_decimated'
                q = 500


################################################################################
# ABR and DPOAE calibration mixins
################################################################################
enamldef InEarCalibrationMixinManifest(ExperimentManifest): manifest:

    attr experiment
    attr outputs
    id = f'{experiment}_inear_calibration_mixin'
    name = f'{experiment}_inear_calibration'
    title = 'In-ear calibration'

    Extension:
        id = manifest.id + '.context'
        point = 'psi.context.items'

        ContextGroup:
            name = 'inear_calibration'
            label = 'In-ear calibration settings'

            Parameter:
                name = 'calibration_gain'
                label = 'Gain (dB)'
                dtype = 'float'
                default = -30

    Extension:
        id = manifest.id + '.calibration'
        point = 'psi.controller.calibration.channels'

        ToneCalibrate:
            name = f'{experiment}_tone_calibration'
            label = 'Tone calibration'
            input_name = 'microphone'
            outputs << manifest.outputs
            gain << C.calibration_gain
            max_thd = None
            min_snr = 5
            duration = 0.1
            trim = 0.01
            iti = 0


enamldef ABRInEarCalibrationMixinManifest(InEarCalibrationMixinManifest): manifest:

    experiment = 'abr'
    outputs = {'target': ['target_tone_frequency']}


enamldef DPOAEInEarCalibrationMixinManifest(InEarCalibrationMixinManifest): manifest:

    experiment = 'dpoae'
    outputs = {
        'primary': ['primary_tone_frequency'],
        'secondary': ['secondary_tone_frequency'],
    }
