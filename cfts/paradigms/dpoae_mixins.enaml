import logging
log = logging.getLogger(__name__)

from functools import partial

import pandas as pd

from atom.api import ContainerList, List, Float, observe, Typed
from enaml.core.api import d_
from enaml.stdlib.fields import FloatField
from enaml.widgets.api import Container, DockItem, Form, Label
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

from psi.controller.api import ExperimentAction
from psi.core.enaml.api import DataFrameTable, PSIManifest
from psi.data.io.api import isodp_th_criterions
from psi.data.plots import DataFramePlot, FFTContainer, ViewBox
from psi.data.sinks.base_store import BaseStore

KEEP_COLS = ['secondary_tone_frequency', 'secondary_tone_level',
             'dpoae_level', 'dpoae_noise_floor', 'f2_level']


class DPOAEThreshold(BaseStore):

    name = 'dpoae_threshold'
    label = 'DPOAE threshold'

    criterions = d_(List())
    data = ContainerList()
    thresholds = d_(Typed(pd.DataFrame))

    def _default_criterions(self):
        return [-5, 0, 5, 10, 15, 20, 25]

    def update(self, data):
        self.data.extend({k: d[k] for k in KEEP_COLS} for d in data)
        self.update_results()

    @observe('criterions')
    def update_results(self, event=None):
        if not self.data:
            return
        df = pd.DataFrame(self.data)
        grouping = df.groupby('secondary_tone_frequency')
        th = grouping.apply(isodp_th_criterions,
                            criterions=self.criterions,
                            debug=False)
        th.columns.name = 'criterion'
        th = th.stack(dropna=False).rename('threshold').reset_index()
        self.thresholds = th.reset_index()


def update(contribution, event):
    contribution.update(event.parameters['data'])


enamldef DPOAEThresholdManifest(PSIManifest): manifest:

    Extension:
        id = manifest.id + '.commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = manifest.contribution.name + '.update'
            handler = partial(update, manifest.contribution)

    Extension:
        id = manifest.id + '.events'
        point = 'psi.controller.actions'
        ExperimentAction:
            weight = 100
            event = 'dpoae_acquired'
            command = manifest.contribution.name + '.update'

    Extension:
        id = manifest.id + '.plots'
        point = 'psi.data.plots'

        FFTContainer:
            label = manifest.contribution.label + ' plot'
            name = manifest.contribution.name + '_container'
            freq_lb = 1e3
            freq_ub = 100e3

            ViewBox:
                y_min = -20
                y_max = 100
                y_mode = 'fixed'
                name = 'dpoae_threshold_view'
                label = 'DPOAE threshold (dB SPL)'

                DataFramePlot: th_plot:
                    x_column = 'secondary_tone_frequency'
                    y_column = 'threshold'
                    grouping = ['criterion']
                    pen_color_cycle = 'palettable.cartocolors.qualitative.Safe_10'

                    initialized ::
                        print(self.pen_color_cycle)
                        print(self.data)
                        # There seems to be an initialization issue. Items are
                        # not getting bound properly. Probably need to set up a
                        # plots manifest thing.

                    # TODO: Why is this not binding? I have to manually update
                    # in the dataframe_table below.
                    data << manifest.contribution.thresholds

    Extension:
        id = manifest.id + '.workspace'
        point = 'psi.experiment.workspace'

        DockItem:
            closable = False
            name = manifest.contribution.name
            title = manifest.contribution.label

            Container: th_container:
                DataFrameTable: th_table:
                    name = 'dpoae_threshold_table'
                    header_resize_mode = 'contents'
                    stretch_last_section = False
                    columns_movable = False
                    data << manifest.contribution.thresholds
                    data ::
                        # TODO: Why???
                        th_plot.data = manifest.contribution.thresholds

                    column_info = {
                        'secondary_tone_frequency': {'label': 'F2'},
                        'criterion': {'label': 'C'},
                        'threshold': {'label': 'Th. (dB SPL)'},
                    }
                    columns = list(column_info.keys())
