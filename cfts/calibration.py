import datetime as dt
from functools import total_ordering
import importlib
import json
from pathlib import Path
import re

import pandas as pd

from psi import get_config
from psiaudio.calibration import FlatCalibration, InterpCalibration


@total_ordering
class Calibration:

    def load(self):
        raise NotImplementedError

    def __repr__(self):
        return f'Calibration :: {self.name} ({self.datetime} - {self.label})'

    def _get_cmp_key(self, obj):
        return obj.name, obj.datetime, obj.label

    def __lt__(self, obj):
        return self._get_cmp_key(self) < self._get_cmp_key(obj)

    def __eq__(self, obj):
        return self._get_cmp_key(self) == self._get_cmp_key(obj)

    def __hash__(self):
        return hash(self._get_cmp_key(self))

    def to_string(self):
        return f'{self.qualname}::{self.name}::{self.filename}'

    @classmethod
    def from_string(cls, string):
        _, name, filename = string.split('::')
        return cls(name, filename)


@total_ordering
class CalibratedObject:

    def __init__(self, name, loaders):
        self.name = name
        self.loaders = loaders

    def list_calibrations(self):
        calibrations = []
        for loader in self.loaders:
            calibrations.extend(loader.list_calibrations(self.name))
        return calibrations

    def get_current_calibration(self):
        return sorted(self.list_calibrations())[-1]

    def __repr__(self):
        return f'{self.__class__.__name__} :: {self.name}'

    def __str__(self):
        return self.name

    def _get_cmp_key(self, obj):
        return obj.name

    def __lt__(self, obj):
        return self._get_cmp_key(self) < self._get_cmp_key(obj)

    def __eq__(self, obj):
        return self._get_cmp_key(self) == self._get_cmp_key(obj)

    def __hash__(self):
        return hash(self._get_cmp_key(self))


class CalibrationLoader:
    pass


class CalibrationManager:

    P_NAME = re.compile('^(.*)\((.*)\)$')

    def __init__(self, object_class):
        self.loaders = []
        self.object_class = object_class

    def register(self, name):
        module, klass = name.rsplit('.', 1)
        loader = getattr(importlib.import_module(module), klass)()
        self.loaders.append(loader)

    def get_object(self, name):
        return self.object_class(name, self.loaders)

    def list_objects(self):
        names = {}
        for loader in self.loaders:
            for name in loader.list_names():
                names.setdefault(name, []).append(loader)
        objects = []
        for name, loaders in names.items():
            objects.append(self.object_class(name, loaders))
        return objects

    def from_string(self, string):
        qualname = string.split('::', 1)[0]
        module_name, class_name = qualname.rsplit('.', 1)
        module = importlib.import_module(module_name)
        klass = getattr(module, class_name)
        return klass.from_string(string)


################################################################################
# Starship calibration management
################################################################################
class Starship(CalibratedObject):
    pass


class EPLStarshipCalibration(Calibration):
    '''
    Wrapper around a probe tube calibration file generated by the EPL CFTS
    calibration program.
    '''
    def __init__(self, name, filename):
        self.label = 'EPL'
        self.name = name
        self.filename = Path(filename)
        self.qualname = f'{self.__class__.__module__}.{self.__class__.__name__}'

    def to_string(self):
        return f'{self.qualname}::{self.name}::{self.filename}'

    def _get_cmp_key(self, obj):
        return obj.name, obj.datetime, obj.smoothed, obj.label

    @classmethod
    def from_string(cls, string):
        _, name, filename = string.split('::')
        return cls(name, filename)

    @property
    def datetime(self):
        with self.filename.open() as fh:
            for line in fh:
                if line.startswith('Date: '):
                    break
        return dt.datetime.strptime(line[6:].strip(), '%m/%d/%Y %I:%M:%S %p')

    @property
    def smoothed(self):
        with self.filename.open() as fh:
            for line in fh:
                if line.startswith('[Smoothing]'):
                    return True
                if line.startswith('Freq(Hz)'):
                    return False

    def load(self):
        attrs ={
            'calibration_file': str(self.filename),
            'name': self.name,
            'string': self.to_string(),
            'class': self.qualname,
        }
        with self.filename.open() as fh:
            for line in fh:
                if line.startswith('Freq(Hz)'):
                    break
            cal = pd.read_csv(fh, sep='\t', header=None)
            return InterpCalibration.from_spl(cal[0], cal[1], attrs=attrs)

    def __repr__(self):
        s = 'smoothed' if self.smoothed else 'raw'
        return f'Calibration :: {self.name} ({self.datetime} {s} - {self.label})'


class EPLStarshipLoader(CalibrationLoader):
    '''
    Interface that lists available starships and calibrations generated by the
    EPL CFTS calibration program.
    '''
    label = 'EPL'
    base_path = Path(r'C:\Data\Probe Tube Calibrations')

    def list_names(self):
        names = set()
        for calfile in self.base_path.glob('*_ProbeTube*.calib'):
            name = calfile.stem.split('_', 1)[0]
            names.add(f'{name} (EPL)')
        return names

    def list_calibrations(self, name):
        if name.endswith(' (EPL)'):
            name, _ = name.rsplit(' ', 1)
        calibrations = []
        for filename in self.base_path.glob(f'{name}*_ProbeTube*.calib'):
            calibration = EPLStarshipCalibration(name, filename)
            calibrations.append(calibration)
        return calibrations


class CFTSStarshipCalibration(Calibration):
    '''
    Wrapper around a probe tube calibration file generated by the
    psiexperiment-based CFTS calibration program.
    '''
    def __init__(self, name, filename):
        self.label = 'CFTS'
        self.name = name
        self.filename = Path(filename)
        self.qualname = f'{self.__class__.__module__}.{self.__class__.__name__}'

    @property
    def datetime(self):
        datestr, _ = self.filename.stem.split(' ', 1)
        return dt.datetime.strptime(datestr, '%Y%m%d-%H%M%S')

    def load(self):
        pass


class EPLStarshipLoader(CalibrationLoader):
    '''
    Interface that lists available starships and calibrations generated by the
    EPL CFTS calibration program.
    '''
    label = 'EPL'
    base_path = Path(r'C:\Data\Probe Tube Calibrations')

    def list_names(self):
        names = set()
        for calfile in self.base_path.glob('*_ProbeTube*.calib'):
            name = calfile.stem.split('_', 1)[0]
            names.add(f'{name} (EPL)')
        return names

    def list_calibrations(self, name):
        if name.endswith(' (EPL)'):
            name, _ = name.rsplit(' ', 1)
        calibrations = []
        for filename in self.base_path.glob(f'{name}*_ProbeTube*.calib'):
            calibration = EPLStarshipCalibration(name, filename)
            calibrations.append(calibration)
        return calibrations


class CFTSStarshipLoader(CalibrationLoader):

    def __init__(self):
        self.label = 'CFTS'
        self.base_path = get_config('CAL_ROOT') / 'starship'

    def list_names(self):
        names = {}
        for path in self.base_path.iterdir():
            yield path.stem

    def list_calibrations(self, name):
        calibrations = []
        for path in (self.base_path / name).glob(f'* {name}'):
            calibrations.append(CFTSStarshipCalibration(name, path))
        return calibrations


################################################################################
# Microphone calibration management
################################################################################
class Microphone(CalibratedObject):
    pass


class CFTSMicrophoneCalibration(Calibration):

    def __init__(self, name, filename):
        self.label = 'CFTS'
        self.name = name
        self.filename = Path(filename)
        self.qualname = f'{self.__class__.__module__}.{self.__class__.__name__}'

    def to_string(self):
        return f'{self.qualname}::{self.name}::{self.filename}'

    @classmethod
    def from_string(cls, string):
        _, name, filename = string.split('::')
        return cls(name, filename)

    @property
    def datetime(self):
        datestr, _ = self.filename.stem.split(' ', 1)
        return dt.datetime.strptime(datestr, '%Y%m%d-%H%M%S')

    def load(self):
        sens_file = self.filename / 'microphone_sensitivity.json'
        cal = json.loads(sens_file.read_text())
        sens = cal['mic sens overall (mV/Pa)']
        attrs = {
            'name': self.name,
            'calibration_file': str(self.filename),
            'calibration': cal,
            'string': self.to_string(),
            'class': self.qualname,
        }
        return FlatCalibration.from_mv_pa(sens, attrs=attrs)


class CFTSMicrophoneLoader(CalibrationLoader):

    def __init__(self):
        self.label = 'CFTS'
        self.base_path = get_config('CAL_ROOT') / 'microphone'

    def list_names(self):
        names = {}
        for path in self.base_path.iterdir():
            yield path.stem

    def list_calibrations(self, name):
        calibrations = []
        for path in (self.base_path / name).glob(f'* {name}'):
            calibrations.append(CFTSMicrophoneCalibration(name, path))
        return calibrations


################################################################################
# Basic cal registration
################################################################################
starship_manager = CalibrationManager(Starship)
starship_manager.register('cfts.calibration.EPLStarshipLoader')
microphone_manager = CalibrationManager(Microphone)
microphone_manager.register('cfts.calibration.CFTSMicrophoneLoader')


if __name__ == '__main__':
    starship = starship_manager.get_object('MMM2')
    print(starship.list_calibrations())
    print(microphone_manager.list_objects())

    #print(starships[-1].list_calibrations())
    #loader = EPLStarshipLoader()
    #print(loader.list_names())
    #print(loader.list_calibrations('MMM1'))
