import logging
log = logging.getLogger(__name__)

from pathlib import Path

from enaml.workbench.api import PluginManifest, Extension
from enaml.workbench.core.api import Command

import numpy as np
import pandas as pd

from psi import get_config

from psi.controller.api import ExperimentAction
from psi.controller.engines.nidaq import (NIDAQEngine,
                                          NIDAQHardwareAIChannel,
                                          NIDAQHardwareAOChannel)

from psiaudio.calibration import FlatCalibration
from psiaudio.calibration import InterpCalibration
from psi.controller.input import Transform


def mv_to_C(mv):
    c = (mv-0.050)/0.020 + 35
    m = (c < 35) | (c > 40)
    c[m] = np.nan
    return c


def cal_from_epl(name):
    base_path = Path('c:/Data/Probe Tube Calibrations')
    filename = base_path / f'{name}_ProbeTube.calib'
    with filename.open('r') as fh:
        for line in fh:
            if line.startswith('Freq(Hz)'):
                break
        cal = pd.read_csv(fh, sep='\t',
                          names=['freq', 'SPL', 'phase', 'unsmoothed_SPL'])
    return InterpCalibration.from_spl(cal['freq'], cal['SPL'],
                                      phase=cal['phase'])


def connect_trigger(event):
    # Since we want to make sure timing across all engines in the task are
    # synchronized properly, we need to inspect for the active channels and
    # then determine which device task is the one to syncrhonize all other
    # tasks to. We prioritize the last engine (the one that is started last)
    # and prioritize the analog output over the analog input. This logic may
    # change in the future.
    controller = event.workbench.get_plugin('psi.controller')

    ai_channels = []
    ao_channels = []
    for engine in list(controller._engines.values())[::-1]:
        hw_ai = engine.get_channels(direction='in', timing='hw', active=True)
        hw_ao = engine.get_channels(direction='out', timing='hw', active=True)
        ai_channels.extend(hw_ai)
        ao_channels.extend(hw_ao)

    channels = ai_channels + ao_channels
    if len(channels) == 0:
        return

    # If only one channel is active, we don't have any sync issues.
    if len(channels) == 1:
        channels[0].start_trigger = None
        return

    if ao_channels:
        dev = ao_channels[0].channel.split('/', 1)[0]
        direction = 'ao'
    else:
        dev = ai_channels[0].channel.split('/', 1)[0]
        direction = 'ai'

    trigger = f'/{dev}/{direction}/StartTrigger'
    for c in channels:
        if dev in c.channel and direction in c.channel:
            log.info(f'Setting {c} start_trigger to ""')
            c.start_trigger = ''
        else:
            log.info(f'Setting {c} start_trigger to "{trigger}"')
            c.start_trigger = trigger


enamldef IOManifest(PluginManifest): manifest:

    Extension:
        id = 'HMU016_commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = 'HMU016.connect_trigger'
            handler = connect_trigger

    Extension:
        id = 'HMU016_actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'experiment_prepare'
            command = 'HMU016.connect_trigger'
            weight = 90

    Extension:
        id = 'HMU016_backend'
        point = 'psi.controller.io'

        NIDAQEngine:
            name = 'NI_misc'
            hw_ai_monitor_period = 0.125
            weight = 1

            NIDAQHardwareAIChannel:
                label = 'EEG'
                name = 'eeg_channel'
                channel = 'Dev1/ai0'
                fs = 25e3
                reference_clock = 'PXI_Clk10'
                start_trigger = 'PXI_Trig0'
                expected_range = (-10, 10)
                dtype = 'float64'
                terminal_mode = 'differential'
                terminal_coupling = 'DC'
                unit = 'V'

        NIDAQEngine:
            name = 'NI_audio_A'
            weight = 3

            hw_ai_monitor_period = 0.125
            hw_ao_monitor_period = 0.125
            hw_ao_buffer_size = 5

            ########################################################
            # Calibration channel
            ########################################################
            NIDAQHardwareAIChannel:
                label = 'Calibration microphone'
                name = 'reference_microphone_channel'
                channel = 'PXI1Slot3/ai1'
                fs = 100e3
                reference_clock = 'PXI_Clk10'
                start_trigger = 'PXI_Trig0'
                expected_range = (-10, 10)
                dtype = 'float64'
                terminal_mode = 'pseudodifferential'
                terminal_coupling = 'DC'
                gain = 40
                calibration_user_editable = True
                max_range = (-10, 10)

            ########################################################
            # Left starship
            ########################################################
            NIDAQHardwareAOChannel:
                label = 'Starship A (primary)'
                name = 'starship_A_primary'
                channel = 'PXI1Slot3/ao0'
                fs = 100e3
                reference_clock = 'PXI_Clk10'
                start_trigger = 'PXI_Trig0'
                expected_range = (-1, 1)
                dtype = 'float64'
                terminal_mode = 'pseudodifferential'
                calibration = FlatCalibration.as_attenuation()
                #: The nominal max range in the spec sheet is higher, but we clip it to a
                #: reasonable range to avoid damaging connected equipment.
                max_range = (-1.0, 1.0)

            NIDAQHardwareAOChannel:
                label = 'starship A (secondary)'
                name = 'starship_A_secondary'
                channel = 'PXI1Slot3/ao1'
                fs = 100e3
                reference_clock = 'PXI_Clk10'
                start_trigger = 'PXI_Trig0'
                expected_range = (-1, 1)
                dtype = 'float64'
                terminal_mode = 'pseudodifferential'
                calibration = FlatCalibration.as_attenuation()

            NIDAQHardwareAIChannel:
                label = 'starship A microphone'
                name = 'starship_A_microphone'
                channel = 'PXI1Slot3/ai0'
                fs = 100e3
                reference_clock = 'PXI_Clk10'
                start_trigger = 'PXI_Trig0'
                expected_range = (-10, 10)
                dtype = 'float64'
                terminal_mode = 'pseudodifferential'
                terminal_coupling = 'DC'
                gain = 40
                calibration = cal_from_epl('MMM1')

        NIDAQEngine:
            name = 'NI_audio_B'
            weight = 2
            ########################################################
            # Right starship
            ########################################################
            NIDAQHardwareAOChannel:
                label = 'Starship B (primary)'
                name = 'starship_B_primary'
                channel = 'PXI1Slot4/ao0'
                fs = 100e3
                reference_clock = 'PXI_Clk10'
                start_trigger = 'PXI_Trig0'
                expected_range = (-1, 1)
                dtype = 'float64'
                terminal_mode = 'pseudodifferential'
                calibration = FlatCalibration.as_attenuation()
                #: The nominal max range in the spec sheet is higher, but we clip it to a
                #: reasonable range to avoid damaging connected equipment.
                max_range = (-1.0, 1.0)

            NIDAQHardwareAOChannel:
                label = 'Starship B (secondary)'
                name = 'starship_B_secondary'
                channel = 'PXI1Slot4/ao1'
                fs = 100e3
                reference_clock = 'PXI_Clk10'
                start_trigger = 'PXI_Trig0'
                expected_range = (-1, 1)
                dtype = 'float64'
                terminal_mode = 'pseudodifferential'
                calibration = FlatCalibration.as_attenuation()

            NIDAQHardwareAIChannel:
                label = 'starship B microphone'
                name = 'starship_B_microphone'
                channel = 'PXI1Slot4/ai0'
                fs = 100e3
                reference_clock = 'PXI_Clk10'
                start_trigger = 'PXI_Trig0'
                expected_range = (-10, 10)
                dtype = 'float64'
                terminal_mode = 'pseudodifferential'
                terminal_coupling = 'DC'
                gain = 40
                calibration = cal_from_epl('MMM3')
