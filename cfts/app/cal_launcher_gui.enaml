import subprocess

from atom.api import Atom, Bool, List, Str, Value
import numpy as np
from palettable.tableau import Tableau_20
import pyqtgraph as pg

import enaml
with enaml.imports():
    from psi.data.plots_manifest import PGCanvas

from enaml.core.api import Looper
from enaml.layout.api import (
    align, hbox, spacer, vbox, AreaLayout, HSplitLayout, VSplitLayout, TabLayout
)
from enaml.widgets.api import (
    Container, Label, Field, Form, MainWindow, ObjectCombo, PopupView,
    PushButton, DockArea, DockItem,
)
from enamlx.widgets.api import TreeView, TreeViewItem, TreeViewColumn

from psi import get_config
from psi.data.plots import make_color

from cfts.calibration import (
    CFTSInEarLoader, CFTSMicrophoneLoader, CFTSStarshipLoader, inear_manager,
    microphone_manager, starship_manager
)

cfts_mic_loader = CFTSMicrophoneLoader()
cfts_starship_loader = CFTSStarshipLoader()
cfts_inear_loader = CFTSInEarLoader()

CAL_ROOT = get_config('CAL_ROOT')


class Settings(Atom):

    starship = Str()
    microphone = Str()
    ear = Str()

    def _default_starship(self):
        return next(cfts_starship_loader.list_names())

    def _default_microphone(self):
        return next(cfts_mic_loader.list_names())

    def run_mic_cal(self):
        filename = f'{{date_time}} {self.microphone}'
        filename = ' '.join(filename.split())
        pathname = CAL_ROOT / 'microphone' / self.microphone / filename
        args = ['psi', 'pistonphone_calibration', str(pathname)]
        print(' '.join(args))
        subprocess.check_output(args)

    def _run_cal(self, experiment):
        filename = f'{{date_time}} {self.starship} {self.microphone} {experiment}'
        filename = ' '.join(filename.split())
        pathname = CAL_ROOT / 'starship' / self.starship / filename
        args = ['psi', experiment, str(pathname)]
        print(' '.join(args))
        subprocess.check_output(args)

    def run_pt_cal_golay(self):
        self._run_cal('pt_calibration_golay')

    def run_pt_cal_chirp(self):
        self._run_cal('pt_calibration_chirp')

    def run_inear_cal_chirp(self, save=True):
        filename = f'{{date_time}} {self.ear} {self.starship}'
        filename = ' '.join(filename.split())
        pathname = CAL_ROOT / 'inear' / self.ear / filename
        args = ['psi', 'inear_speaker_calibration_chirp', str(pathname)]
        print(' '.join(args))
        subprocess.check_output(args)


enamldef AddItem(PopupView): popup:

    attr combo
    window_type = 'popup'
    arrow_size = 20
    arrow_edge = 'top'
    alias label: label.text

    Container:
        constraints = [
            vbox(
                hbox(label, field),
                hbox(spacer(0), pb_ok, pb_cancel, spacing=0)
            ),
            align('v_center', label, field),
            align('v_center', pb_ok, pb_cancel),
            align('width', pb_ok, pb_cancel),
        ]

        Label: label:
            pass
        Field: field:
            pass
        PushButton: pb_ok:
            text = 'OK'
            clicked ::
                items = combo.items[:]
                items.append(field.text)
                combo.items = items
                combo.selected = field.text
                popup.close()

        PushButton: pb_cancel:
            text = 'Cancel'
            clicked ::
                popup.close()


class BasePlotManager:

    def __init__(self):
        component = pg.GraphicsLayout()
        component.setSpacing(10)
        y_axis = pg.AxisItem('left')
        y_axis.setLabel('Sensitivity (dB re 1Vrms)')
        y_axis.setGrid(64)
        component.addItem(y_axis, 0, 0)

        x_axis = pg.AxisItem('bottom')
        x_axis.setGrid(64)
        x_axis.setLabel('Frequency', units='Hz')
        x_axis.setLogMode(True)
        component.addItem(x_axis, 1, 1)

        vb = pg.ViewBox()
        vb.setBackgroundColor('w')
        y_axis.linkToView(vb)
        x_axis.linkToView(vb)
        component.addItem(vb, 0, 1)

        legend = pg.LegendItem()
        legend.setParentItem(vb)

        self.legend = legend
        self.component = component
        self.vb = vb

        self.color_cycle = iter(Tableau_20.colors)

        self.plots = {}

    def plot(self, calibration):
        if calibration not in self.plots:
            self.plots[calibration] = self.make_plot(calibration)

        self.legend.addItem(self.plots[calibration], str(calibration))
        self.vb.addItem(self.plots[calibration])

    def remove(self, calibration):
        if calibration not in self.plots:
            return
        self.legend.removeItem(self.plots[calibration])
        self.vb.removeItem(self.plots[calibration])


class StarshipPlotManager(BasePlotManager):

    def make_plot(self, calibration):
        color = make_color(next(self.color_cycle))
        pen = pg.mkPen(color, width=2)
        plot = pg.PlotCurveItem(pen=pen)
        cal = calibration.load()
        x = np.log10(cal.frequency)
        y = cal.sensitivity
        plot.setData(x, y)
        return plot


class InEarPlotManager(BasePlotManager):

    def make_plot(self, calibration):
        color = make_color(next(self.color_cycle))
        pen = pg.mkPen(color, width=2)
        plot = pg.PlotCurveItem(pen=pen)
        cal = calibration.load()
        x = np.log10(cal.frequency)
        y = cal.sensitivity
        plot.setData(x, y)
        return plot


class MicrophonePlotManager(BasePlotManager):

    def make_plot(self, calibration):
        color = make_color(next(self.color_cycle))
        pen = pg.mkPen(color, width=2)
        plot = pg.PlotCurveItem(pen=pen)
        fh = calibration.load_recording()
        psd = fh.get_psd(average_seconds=1)
        x = np.log10(psd.index.values)
        y = psd.values
        print(x)
        print(y)
        plot.setData(x, y)
        return plot


################################################################################
# Organize list of calibrated objects and calibrations for each object
################################################################################
class ObjectGroup(Atom):
    selected = Bool(False)
    skip_autoselect = Bool(False)
    subitems = List()
    item = Value()
    manager = Value()

    def __init__(self, item, manager):
        self.item = item
        self.manager = manager
        calibrations = sorted(item.list_calibrations(), reverse=True)
        self.subitems = [ObjectNode(item=c, manager=manager) for c in calibrations]

    def _observe_subitems(self, event):
        for i in self.subitems:
            i.observe('selected', self._check_selected)

    def _check_selected(self, event):
        for i in self.subitems:
            if i.selected:
                self.skip_autoselect = True
                self.selected = True
                self.skip_autoselect = False
                return
        self.selected = False

    def _observe_selected(self, event):
        if self.selected:
            if not self.skip_autoselect:
                self.subitems[0].selected = True
        else:
            for i in self.subitems:
                i.selected = False


class ObjectNode(Atom):
    selected = Bool(False)
    item = Value()
    manager = Value()

    def _observe_selected(self, event):
        if self.selected:
            self.manager.plot(self.item)
        else:
            self.manager.remove(self.item)


enamldef CalibratedObjects(Container):
    alias items: tree.items
    alias headers: tree.horizontal_headers

    TreeView: tree:
        horizontal_headers = ['Name']
        resize_mode = 'resize_to_contents'
        horizontal_stretch = True
        Looper:
            iterable << parent.items
            TreeViewItem:
                text << loop_item.item.name
                items << loop_item.subitems
                checkable = True
                checked := loop_item.selected
                Looper:
                    iterable << parent.items
                    TreeViewItem:
                        checkable = True
                        checked := loop_item.selected
                        text << str(loop_item.item.datetime)


################################################################################
# Main window
################################################################################
enamldef Main(MainWindow):

    title = 'Calibration'
    initial_size = (1248, 768)

    attr settings = Settings()

    Container:
        DockArea: area:
            layout = AreaLayout(
                HSplitLayout(
                    VSplitLayout('settings',
                                 VSplitLayout('inear_list', 'starship_list', 'mic_list'),
                                 sizes=[50, 600],
                                 ),
                    TabLayout(
                        'inear_sens_plot',
                        'starship_sens_plot',
                        'mic_sens_plot',
                    ),
                    sizes=[150, 900],
                ),
            )

            DockItem:
                name = 'settings'
                title = 'Settings'
                closable = False
                stretch = 0

                Container:
                    constraints = [
                        vbox(
                            hbox(mic_label, hbox(mic_select, mic_add, spacing=0), mic_cal_start),
                            hbox(starship_label,
                                 hbox(starship_select, starship_add, spacing=0),
                                 hbox(golay_start, chirp_start, spacing=0)
                                ),
                            hbox(inear_label, hbox(inear_select, inear_add, spacing=0), inear_start),
                        ),
                        mic_add.width == 30,
                        starship_add.width == 30,
                        inear_add.width == 30,
                        align('width', mic_label, starship_label, inear_label),
                        align('width', mic_select, starship_select, inear_select),
                        align('left', mic_label, starship_label, inear_label),
                        align('left', mic_select, starship_select, inear_select),
                        align('v_center', mic_label, mic_select, mic_add, mic_cal_start),
                        align('v_center', starship_label, starship_select, starship_add),
                        align('v_center', golay_start, chirp_start),
                        align('v_center', inear_label, inear_select, inear_add, inear_start),
                    ]

                    Label: mic_label:
                        text = 'Microphone'

                    ObjectCombo: mic_select:
                        items = sorted(cfts_mic_loader.list_names())
                        selected := settings.microphone

                    PushButton: mic_add:
                        text = '+'
                        clicked ::
                            popup = AddItem(self, combo=mic_select, label='Microphone')
                            popup.show()

                    PushButton: mic_cal_start:
                        text = 'Calibrate'
                        clicked ::
                            settings.run_mic_cal()

                    Label: starship_label:
                        text = 'Starship'

                    ObjectCombo: starship_select:
                        items = sorted(cfts_starship_loader.list_names())
                        selected := settings.starship

                    PushButton: starship_add:
                        text = '+'
                        clicked ::
                            popup = AddItem(self, combo=starship_select, label='Starship')
                            popup.show()

                    PushButton: golay_start:
                        text = 'Golay'
                        clicked ::
                            settings.run_pt_cal_golay()

                    PushButton: chirp_start:
                        text = 'Chirp'
                        clicked ::
                            settings.run_pt_cal_chirp()

                    Label: inear_label:
                        text = 'Ear'

                    ObjectCombo: inear_select:
                        items = sorted(cfts_inear_loader.list_names())
                        selected := settings.ear

                    PushButton: inear_add:
                        text = '+'
                        clicked ::
                            popup = AddItem(self, combo=inear_select, label='Ear')
                            popup.show()

                    PushButton: inear_start:
                        text = 'Run'
                        clicked ::
                            settings.run_inear_cal_chirp()

            DockItem:
                name = 'mic_sens_plot'
                title = 'Microphone Sensitivity'
                closable = False
                stretch = 10

                Container:
                    PGCanvas: microphone_plot:
                        attr manager = MicrophonePlotManager()
                        component << manager.component

            DockItem:
                name = 'starship_sens_plot'
                title = 'Starship Sensitivity'
                closable = False
                stretch = 10

                Container:
                    PGCanvas: starship_plot:
                        attr manager = StarshipPlotManager()
                        component << manager.component

            DockItem:
                name = 'inear_sens_plot'
                title = 'In-Ear Sensitivity'
                closable = False
                stretch = 10

                Container:
                    PGCanvas: inear_plot:
                        attr manager = InEarPlotManager()
                        component << manager.component

            DockItem:
                name = 'inear_list'
                title = 'In-Ear Calibrations'
                closable = False
                stretch = 0

                CalibratedObjects:
                    items << [ObjectGroup(o, inear_plot.manager) \
                            for o in sorted(inear_manager.list_objects())]

            DockItem:
                name = 'starship_list'
                title = 'Starship Calibrations'
                closable = False
                stretch = 0

                CalibratedObjects:
                    items << [ObjectGroup(o, starship_plot.manager) \
                              for o in sorted(starship_manager.list_objects())]

            DockItem:
                name = 'mic_list'
                title = 'Microphone Calibrations'
                closable = False
                stretch = 0

                CalibratedObjects:
                    items << [ObjectGroup(o, microphone_plot.manager) \
                              for o in sorted(microphone_manager.list_objects())]
