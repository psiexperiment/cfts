import subprocess

from atom.api import Atom, Str
import pyqtgraph as pg

import enaml
with enaml.imports():
    from psi.data.plots_manifest import PGCanvas

from enaml.layout.api import align, hbox, spacer, vbox
from enaml.widgets.api import (
    Container, Label, Field, Form, MainWindow, ObjectCombo, PopupView, PushButton
)

from psi import get_config

from cfts.util import CFTSMicrophoneLoader, CFTSStarshipLoader


CAL_ROOT = get_config('CAL_ROOT')


class Settings(Atom):

    starship = Str()
    microphone = Str()

    def _default_starship(self):
        return next(CFTSStarshipLoader.list_choices())

    def _default_microphone(self):
        return next(CFTSMicrophoneLoader.list_choices())

    def run_mic_cal(self, save=True):
        filename = f'{{date_time}} {self.microphone}'
        filename = ' '.join(filename.split())
        pathname = CAL_ROOT / 'microphone' / self.microphone / filename
        args = ['psi', 'pistonphone_calibration', str(pathname)]
        print(' '.join(args))
        subprocess.check_output(args)

    def _run_cal(self, experiment):
        filename = f'{{date_time}} {self.starship} {self.microphone} {experiment}'
        filename = ' '.join(filename.split())
        pathname = CAL_ROOT / 'starship' / self.starship / filename
        args = ['psi', experiment, str(pathname)]
        print(' '.join(args))
        subprocess.check_output(args)

    def run_pt_cal_golay(self, save=True):
        self._run_cal('pt_calibration_golay')

    def run_pt_cal_chirp(self, save=True):
        self._run_cal('pt_calibration_chirp')


enamldef AddItem(PopupView): popup:

    attr combo
    window_type = 'popup'
    arrow_size = 20
    arrow_edge = 'top'
    alias label: label.text

    Container:
        constraints = [
            vbox(
                hbox(label, field),
                hbox(spacer(0), pb_ok, pb_cancel, spacing=0)
            ),
            align('v_center', label, field),
            align('v_center', pb_ok, pb_cancel),
            align('width', pb_ok, pb_cancel),
        ]

        Label: label:
            pass
        Field: field:
            pass
        PushButton: pb_ok:
            text = 'OK'
            clicked ::
                items = combo.items[:]
                items.append(field.text)
                combo.items = items
                combo.selected = field.text
                popup.close()

        PushButton: pb_cancel:
            text = 'Cancel'
            clicked ::
                popup.close()


enamldef Main(MainWindow):

    title = 'Calibration'
    attr settings = Settings()

    Container:

        constraints = [
            hbox(
                vbox(
                    hbox(mic_label, hbox(mic_select, mic_add, spacing=0), mic_cal_start),
                    hbox(starship_label, 
                        hbox(starship_select, starship_add, spacing=0), 
                        hbox(golay_start, chirp_start, spacing=0)
                        ),
                ),
                center_plot,
            ),
            mic_add.width == 30,
            starship_add.width == 30,
            align('width', mic_label, starship_label),
            align('width', mic_select, starship_select),
            align('left', mic_label, starship_label),
            align('left', mic_select, starship_select),
            align('v_center', mic_label, mic_select, mic_add, mic_cal_start),
            align('v_center', starship_label, starship_select, starship_add),
            align('v_center', golay_start, chirp_start),
        ]

        Label: mic_label:
            text = 'Microphone'

        ObjectCombo: mic_select:
            items = list(CFTSMicrophoneLoader.list_choices())
            selected := settings.microphone

        PushButton: mic_add:
            text = '+'
            clicked ::
                popup = AddItem(self, combo=mic_select, label='Microphone')
                popup.show()

        PushButton: mic_cal_start:
            text = 'Calibrate'
            clicked ::
                settings.run_mic_cal()

        Label: starship_label:
            text = 'Starship'

        ObjectCombo: starship_select:
            items = list(CFTSStarshipLoader.list_choices())
            selected := settings.starship

        PushButton: starship_add:
            text = '+'
            clicked ::
                popup = AddItem(self, combo=starship_select, label='Starship')
                popup.show()

        PushButton: golay_start:
            text = 'Golay'
            clicked ::
                settings.run_pt_cal_golay()

        PushButton: chirp_start:
            text = 'Chirp'
            clicked ::
                settings.run_pt_cal_chirp()

        PGCanvas: center_plot:
            initialized ::
                component = pg.GraphicsLayout()
                component.setSpacing(10)
                y_axis = pg.AxisItem('left')
                y_axis.setLabel('Sensitivity (dB re 1Vrms)')
                y_axis.setGrid(64)
                component.addItem(y_axis, 0, 0)

                x_axis = pg.AxisItem('bottom')
                x_axis.setGrid(64)
                x_axis.setLabel('Frequency', units='Hz')
                #x_axis.logTickStrings = format_log_ticks
                x_axis.setLogMode(True)
                component.addItem(y_axis, 1, 1)

                self.component = component
