import json
import os
import shutil
import subprocess

from atom.api import Atom, Bool, Float, List, Property, Str, Value
import numpy as np
from palettable.tableau import Tableau_20
import pyqtgraph as pg

import enaml
with enaml.imports():
    from psi.data.plots_manifest import PGCanvas

from enaml.colors import Color
from enaml.core.api import DynamicTemplate, Looper
from enaml.layout.api import (
    align, hbox, spacer, vbox, AreaLayout, HSplitLayout, VSplitLayout, TabLayout
)
from enaml.stdlib.fields import FloatField
from enaml.stdlib.message_box import question
from enaml.widgets.api import (
    Action, ActionGroup, Container, Label, Field, Form, MainWindow, Menu, MenuBar,
    ObjectCombo, PopupView, PushButton, DockArea, DockItem,
)
from enamlx.widgets.api import TreeView, TreeViewItem, TreeViewColumn

from psi import get_config, get_config_folder
from psi.data.plots import make_color

from cfts.calibration import (
    CFTSInEarLoader, CFTSMicrophoneLoader, CFTSStarshipLoader,
    CFTSMicrophoneCalibration, inear_manager, microphone_manager,
    starship_manager
)
from cfts.util import list_starship_connections

cfts_mic_loader = CFTSMicrophoneLoader()
cfts_starship_loader = CFTSStarshipLoader()
cfts_inear_loader = CFTSInEarLoader()

CAL_ROOT = get_config('CAL_ROOT')


class PersistentSettings(Atom):

    filename = Property()

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.load_config()

    def __del__(self):
        self.save_config()

    def save_config(self):
        file = get_config_folder() / 'cfts' / 'calibration' / self.filename
        file.parent.mkdir(exist_ok=True, parents=True)
        config = {m: getattr(self, m) for m in self.members()}
        file.write_text(json.dumps(config, indent=2))

    def load_config(self):
        file = get_config_folder() / 'cfts' / 'calibration' / self.filename
        if not file.exists():
            return
        config = json.loads(file.read_text())
        for k, v in config.items():
            try:
                setattr(self, k, v)
            except:
                pass

    def _run_cal(self, filename, experiment, env=None):
        if env is None:
            env = {}
        env = {**os.environ, **env, **self.get_env_vars()}
        args = ['psi', experiment, str(filename)]
        print(' '.join(args))
        subprocess.check_output(args, env=env)


class MicrophoneSettings(PersistentSettings):

    pistonphone = Str()
    pistonphone_frequency = Float(1e3)
    pistonphone_level = Float(114)
    microphone = Str()
    microphone_gain = Float(20)

    def get_env_vars(self):
        mic = microphone_manager.get_object(self.microphone)
        cal = mic.get_current_calibration()
        return {
            'CFTS_CAL_MIC': cal.to_string(),
            'CFTS_CAL_MIC_GAIN': str(self.microphone_gain),
            'CFTS_PISTONPHONE_LEVEL': str(self.pistonphone_level),
            'CFTS_PISTONPHONE_FREQUENCY': str(self.pistonphone_frequency),
        }

    def _get_filename(self):
        return 'microphone.json'

    def _default_microphone(self):
        try:
            return next(cfts_mic_loader.list_names())
        except StopIteration:
            return ''

    def run_mic_cal(self):
        filename = f'{{date_time}} {self.microphone} {self.pistonphone}'
        filename = ' '.join(filename.split())
        pathname = CAL_ROOT / 'microphone' / self.microphone / filename
        self._run_cal(pathname, 'pistonphone_calibration')


class OutputSettings(PersistentSettings):

    output = Str()
    starship = Str()
    starship_gain = Float(40)
    ear = Str()

    def _get_filename(self):
        return f'output_{self.output}.json'

    def _default_starship(self):
        try:
            return next(cfts_starship_loader.list_names())
        except StopIteration:
            return ''

    def _default_ear(self):
        try:
            return next(cfts_inear_loader.list_names())
        except StopIteration:
            return ''

    def get_env_vars(self):
        starship = starship_manager.get_object(self.starship)
        cal = starship.get_current_calibration()
        return {
            'CFTS_TEST_STARSHIP': self.output,
            f'CFTS_STARSHIP_{self.output}_GAIN': str(self.starship_gain),
            f'CFTS_STARSHIP_{self.output}': cal.to_string()
        }

    def run_pt_cal_golay(self, mic_settings):
        filename = f'{{date_time}} {self.starship} {mic_settings.microphone} pt_calibration_golay'
        filename = ' '.join(filename.split())
        pathname = CAL_ROOT / 'starship' / self.starship / filename
        env = mic_settings.get_env_vars()
        self._run_cal(pathname, 'pt_calibration_golay', env)

    def run_pt_cal_chirp(self):
        filename = f'{{date_time}} {self.starship} {mic_settings.microphone} pt_calibration_chirp'
        filename = ' '.join(filename.split())
        pathname = CAL_ROOT / 'starship' / self.starship / filename
        env = mic_settings.get_env_vars()
        self._run_cal(pathname, 'pt_calibration_chirp', env)

    def run_inear_cal_chirp(self, save=True):
        filename = f'{{date_time}} {self.ear} {self.starship}'
        filename = ' '.join(filename.split())
        pathname = CAL_ROOT / 'inear' / self.ear / filename
        self._run_cal(pathname, 'inear_speaker_calibration_chirp')


enamldef AddItem(PopupView): popup:

    attr combo
    window_type = 'popup'
    arrow_size = 20
    arrow_edge = 'top'
    alias label: label.text

    Container:
        constraints = [
            vbox(
                hbox(label, field),
                hbox(spacer(0), pb_ok, pb_cancel, spacing=0)
            ),
            align('v_center', label, field),
            align('v_center', pb_ok, pb_cancel),
            align('width', pb_ok, pb_cancel),
        ]

        Label: label:
            pass
        Field: field:
            pass
        PushButton: pb_ok:
            text = 'OK'
            clicked ::
                items = combo.items[:]
                items.append(field.text)
                combo.items = items
                combo.selected = field.text
                popup.close()

        PushButton: pb_cancel:
            text = 'Cancel'
            clicked ::
                popup.close()


class BasePlotManager:

    def __init__(self):
        component = pg.GraphicsLayout()
        component.setSpacing(10)
        y_axis = pg.AxisItem('left')
        y_axis.setLabel('Sensitivity (dB re 1Vrms)')
        y_axis.setGrid(64)
        component.addItem(y_axis, 0, 0)

        x_axis = pg.AxisItem('bottom')
        x_axis.setGrid(64)
        x_axis.setLabel('Frequency', units='Hz')
        x_axis.setLogMode(True)
        component.addItem(x_axis, 1, 1)

        vb = pg.ViewBox()
        vb.setBackgroundColor('w')
        y_axis.linkToView(vb)
        x_axis.linkToView(vb)
        component.addItem(vb, 0, 1)

        legend = pg.LegendItem()
        legend.setParentItem(vb)

        self.legend = legend
        self.component = component
        self.vb = vb

        self.color_cycle = iter(Tableau_20.colors)

        self.plots = {}

    def plot(self, calibration):
        if calibration not in self.plots:
            color, plot = self.make_plot(calibration)
            color = Color(color.red(), color.green(), color.blue(), color.alpha())
            self.plots[calibration] = color, plot
        color, plot = self.plots[calibration]
        self.legend.addItem(plot, str(calibration))
        self.vb.addItem(plot)
        return color

    def remove(self, calibration):
        if calibration not in self.plots:
            return
        _, plot = self.plots[calibration]
        self.legend.removeItem(plot)
        self.vb.removeItem(plot)


class StarshipPlotManager(BasePlotManager):

    def make_plot(self, calibration):
        color = make_color(next(self.color_cycle))
        pen = pg.mkPen(color, width=2)
        plot = pg.PlotCurveItem(pen=pen)
        cal = calibration.load()
        x = np.log10(cal.frequency[1:])
        y = cal.sensitivity[1:]
        plot.setData(x, y)
        return color, plot


class InEarPlotManager(BasePlotManager):

    def make_plot(self, calibration):
        color = make_color(next(self.color_cycle))
        pen = pg.mkPen(color, width=2)
        plot = pg.PlotCurveItem(pen=pen)
        cal = calibration.load()
        x = np.log10(cal.frequency[1:])
        y = cal.sensitivity[1:]
        plot.setData(x, y)
        return color, plot


class MicrophonePlotManager(BasePlotManager):

    def make_plot(self, calibration):
        color = make_color(next(self.color_cycle))
        pen = pg.mkPen(color, width=2)
        plot = pg.PlotCurveItem(pen=pen)
        fh = calibration.load_recording()
        psd = fh.get_psd(average_seconds=1).iloc[1:]
        x = np.log10(psd.index.values)
        y = psd.values
        plot.setData(x, y)
        return color, plot


################################################################################
# Organize list of calibrated objects and calibrations for each object
################################################################################
class ObjectNode(Atom):
    selected = Bool(False)
    item = Value()
    manager = Value()
    color = Value(None)

    def _observe_selected(self, event):
        if self.selected:
            self.color = self.manager.plot(self.item)
        else:
            self.manager.remove(self.item)
            self.color = None


class ObjectGroup(Atom):
    selected = Bool(False)
    skip_autoselect = Bool(False)
    subitems = List(ObjectNode)
    item = Value()
    manager = Value()
    color = Value(None)

    def __init__(self, item, manager):
        self.item = item
        self.manager = manager
        self.update_subitems()

    def update_subitems(self):
        objects = sorted(self.item.list_calibrations(), reverse=True)
        self.subitems = [ObjectNode(item=obj, manager=self.manager) for obj in objects]
        return
        subitems = [i for i in self.subitems if i.item in objects]
        for obj in objects:
            for i in subitems:
                if obj == i.item:
                    break
            else:
                subitems.append(ObjectNode(item=obj, manager=self.manager))
        self.subitems = sorted(subitems, key =lambda x: x.item, reverse=True)

    def _observe_subitems(self, event):
        for i in self.subitems:
            i.observe('selected', self._check_selected)
            i.observe('color', self._check_color)

    def _check_selected(self, event):
        for i in self.subitems:
            if i.selected:
                self.skip_autoselect = True
                self.selected = True
                self.skip_autoselect = False
                return
        self.selected = False

    def _check_color(self, event):
        for i in self.subitems:
            if i.color is not None:
                self.color = i.color
                break
        else:
            self.color = None

    def _observe_selected(self, event):
        if self.selected:
            if not self.skip_autoselect:
                self.subitems[0].selected = True
        else:
            for i in self.subitems:
                i.selected = False


class ObjectCollection(Atom):
    groups = List(ObjectGroup)
    manager = Value()
    plot_manager = Value()

    def __init__(self, manager, plot_manager):
        self.manager = manager
        self.plot_manager = plot_manager
        self.update_groups()

    def update_groups(self):
        objects = sorted(self.manager.list_objects())
        self.groups = [ObjectGroup(obj, self.plot_manager) for obj in objects]
        return
        objects = self.manager.list_objects()
        groups = [g for g in self.groups if g.item in objects]
        for obj in objects:
            for i in groups:
                if obj == i.item:
                    i.update_subitems()
                    break
            else:
                groups.append(ObjectGroup(obj, self.plot_manager))

        self.groups = sorted(groups, key=lambda x: x.item)


template CalibratedObjectTemplate(item, MemberType: CFTSMicrophoneCalibration):
    TreeViewColumn:
        text << f'{item.sens:.2f} mV/Pa'
    TreeViewColumn:
        text << item.pistonphone


template CalibratedObjectTemplate(item, MemberType):
    pass


enamldef CalibratedObjects(Container):
    alias headers: tree.horizontal_headers
    attr collection

    TreeView: tree:
        horizontal_headers << ['Name']
        resize_mode = 'resize_to_contents'
        horizontal_stretch = True
        items << collection.groups
        Looper:
            iterable << parent.items
            TreeViewItem: tree_group:
                attr group << loop_item
                text << loop_item.item.name
                items << loop_item.subitems
                checkable = True
                checked := loop_item.selected
                background << loop_item.color
                Looper:
                    iterable << parent.items
                    TreeViewItem: tree_node:
                        checkable = True
                        checked := loop_item.selected
                        text << str(loop_item.item.datetime)
                        background << loop_item.color
                        Menu:
                            Action:
                                text = 'Set as reference'
                            Action:
                                separator = True
                            Action:
                                text = 'Delete'
                                triggered ::
                                    name = f'{loop_item.item.datetime} from {loop_item.item.name}'
                                    q = f'Are you sure you want to delete {name}?'
                                    button = question(tree_node, '', q)
                                    if button.text == 'Yes':
                                        shutil.rmtree(loop_item.item.filename)
                                        collection.update_groups()
                        DynamicTemplate:
                            base = CalibratedObjectTemplate
                            args = (loop_item.item, type(loop_item.item))


################################################################################
# Main window
################################################################################
enamldef Main(MainWindow):

    title = 'Calibration'
    initial_size = (1248, 768)

    attr mic_settings = MicrophoneSettings()
    attr output_settings = [OutputSettings(output=o) for o in list_starship_connections()]

    MenuBar:
        Menu:
            title = '&Calibrate'
            ActionGroup:
                Action:
                    text = '&Microphone'
                Action:
                    text = '&Starship'
                Action:
                    text = '&In-Ear'

    Container:
        DockArea: area:
            layout = AreaLayout(
                HSplitLayout(
                    VSplitLayout(
                        'settings_mic',
                        TabLayout(*[di.name for di in children if 'output' in di.name]),
                        'inear_list', 'starship_list', 'mic_list',
                        sizes=[25, 25, 200, 200, 200],
                    ),
                    TabLayout(
                        'inear_sens_plot',
                        'starship_sens_plot',
                        'mic_sens_plot',
                    ),
                    sizes=[150, 900],
                ),
            )

            DockItem:
                name = 'settings_mic'
                title = 'Microphone'
                closable = False
                stretch = 0

                attr settings = mic_settings

                Container:
                    constraints = [
                        vbox(
                            hbox(
                                pistonphone_label,
                                pistonphone_select,
                                pistonphone_frequency,
                                pistonphone_frequency_label,
                                pistonphone_level,
                                pistonphone_level_label,
                                spacer(0),
                            ),
                            hbox(
                                mic_label,
                                hbox(mic_select, mic_add, mic_gain, spacing=0),
                                mic_gain_label,
                                spacer(0),
                                mic_cal_start,
                                spacing=5,
                            ),
                            spacing=5,
                        ),
                        mic_add.width == 25,
                        pistonphone_frequency.width == 50,
                        pistonphone_level.width == 50,
                        align('width', pistonphone_select, mic_select),
                        align('left', pistonphone_label, mic_label),
                        align('left', pistonphone_select, mic_select),
                        align('v_center', pistonphone_label,
                                pistonphone_select, pistonphone_frequency,
                                pistonphone_frequency_label,
                                pistonphone_level, pistonphone_level_label),
                        align('v_center', mic_label, mic_select, mic_add,
                                mic_gain, mic_gain_label, mic_cal_start),
                    ]

                    Label: pistonphone_label:
                        text = 'Pistonphone'

                    Field: pistonphone_select:
                        text := settings.pistonphone

                    FloatField: pistonphone_frequency:
                        value := settings.pistonphone_frequency

                    Label: pistonphone_frequency_label:
                        text = 'Hz @'

                    FloatField: pistonphone_level:
                        value := settings.pistonphone_level

                    Label: pistonphone_level_label:
                        text = 'dB SPL'

                    Label: mic_label:
                        text = 'Microphone'

                    ObjectCombo: mic_select:
                        items = sorted(cfts_mic_loader.list_names())
                        selected := settings.microphone

                    PushButton: mic_add:
                        text = '+'
                        clicked ::
                            popup = AddItem(self, combo=mic_select, label='Microphone')
                            popup.show()

                    ObjectCombo: mic_gain:
                        items = [-20, -10, 0, 10, 20, 30, 40, 50]
                        selected := settings.microphone_gain

                    Label: mic_gain_label:
                        text = 'dB gain'

                    PushButton: mic_cal_start:
                        text = 'Calibrate'
                        enabled << bool(settings.microphone)
                        clicked ::
                            settings.run_mic_cal()
                            mic_tree.collection.update_groups()

            Looper:
                iterable << output_settings

                DockItem:
                    name = f'settings_output_{loop_item.output}'
                    title = f'Output {loop_item.output}'
                    closable = False
                    stretch = 0

                    attr settings = loop_item

                    Container:
                        constraints = [
                            vbox(
                                hbox(
                                    starship_label,
                                    hbox(starship_select, starship_add, starship_gain, spacing=0),
                                    starship_gain_label,
                                    spacer(0),
                                    hbox(golay_start, chirp_start, spacing=0),
                                    spacing=5,
                                ),
                                hbox(inear_label,
                                     hbox(inear_select, inear_add, spacing=0),
                                     spacer(0),
                                     inear_start),
                                spacing=5,
                            ),
                            starship_add.width == 25,
                            inear_add.width == 25,
                            align('width', starship_select, inear_select),
                            align('left', starship_label, inear_label),
                            align('left', starship_select, inear_select),
                            align('left', golay_start, inear_start),
                            align('right', chirp_start, inear_start),
                            align('v_center', starship_label, starship_select,
                                  starship_add, starship_gain,
                                  starship_gain_label, golay_start,
                                  chirp_start),
                            align('v_center', inear_label, inear_select, inear_add, inear_start),
                        ]

                        Label: starship_label:
                            text = 'Starship'

                        ObjectCombo: starship_select:
                            items = sorted(cfts_starship_loader.list_names())
                            selected := settings.starship

                        PushButton: starship_add:
                            text = '+'
                            clicked ::
                                popup = AddItem(self, combo=starship_select, label='Starship')
                                popup.show()

                        ObjectCombo: starship_gain:
                            items = [20, 40]
                            selected := settings.starship_gain

                        Label: starship_gain_label:
                            text = 'dB gain'

                        PushButton: golay_start:
                            text = 'Golay'
                            enabled << bool(mic_settings.microphone) and bool(settings.starship)
                            clicked ::
                                settings.run_pt_cal_golay(mic_settings)
                                starship_tree.collection.update_groups()

                        PushButton: chirp_start:
                            text = 'Chirp'
                            enabled << bool(mic_settings.microphone) and bool(settings.starship)
                            clicked ::
                                settings.run_pt_cal_chirp(mic_settings)
                                starship_tree.collection.update_groups()

                        Label: inear_label:
                            text = 'Ear'

                        ObjectCombo: inear_select:
                            items = sorted(cfts_inear_loader.list_names())
                            selected := settings.ear

                        PushButton: inear_add:
                            text = '+'
                            clicked ::
                                popup = AddItem(self, combo=inear_select, label='Ear')
                                popup.show()

                        PushButton: inear_start:
                            text = 'Run'
                            enabled << bool(settings.starship) and bool(settings.ear)
                            clicked ::
                                settings.run_inear_cal_chirp()
                                inear_tree.collection.update_groups()

            DockItem:
                name = 'mic_sens_plot'
                title = 'Microphone Sensitivity'
                closable = False
                stretch = 10

                Container:
                    PGCanvas: microphone_plot:
                        attr manager = MicrophonePlotManager()
                        component << manager.component

            DockItem:
                name = 'starship_sens_plot'
                title = 'Starship Sensitivity'
                closable = False
                stretch = 10

                Container:
                    PGCanvas: starship_plot:
                        attr manager = StarshipPlotManager()
                        component << manager.component

            DockItem:
                name = 'inear_sens_plot'
                title = 'In-Ear Sensitivity'
                closable = False
                stretch = 10

                Container:
                    PGCanvas: inear_plot:
                        attr manager = InEarPlotManager()
                        component << manager.component

            DockItem:
                name = 'inear_list'
                title = 'In-Ear Calibrations'
                closable = False
                stretch = 0

                CalibratedObjects: inear_tree:
                    collection = ObjectCollection(
                        inear_manager, inear_plot.manager
                    )

            DockItem:
                name = 'starship_list'
                title = 'Starship Calibrations'
                closable = False
                stretch = 0

                CalibratedObjects: starship_tree:
                    collection = ObjectCollection(
                        starship_manager, starship_plot.manager
                    )

            DockItem:
                name = 'mic_list'
                title = 'Microphone Calibrations'
                closable = False
                stretch = 0

                CalibratedObjects: mic_tree:
                    headers = ['Name', 'Sens', 'Pistonphone']
                    collection = ObjectCollection(
                        microphone_manager, microphone_plot.manager
                    )
